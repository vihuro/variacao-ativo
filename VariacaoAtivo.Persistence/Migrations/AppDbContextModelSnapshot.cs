// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VariacaoAtivo.Persistence.Context;

#nullable disable

namespace VariacaoAtivo.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VariacaoAtivo.Domain.Entities.ChartEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("ChartPreviousClose")
                        .HasColumnType("double precision");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExachangeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExchangeTimeZone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PreviousClose")
                        .HasColumnType("double precision");

                    b.Property<List<double>>("QuoteClose")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<List<double>>("QuoteHigh")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<List<double>>("QuoteLow")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<List<double>>("QuoteOpen")
                        .IsRequired()
                        .HasColumnType("double precision[]");

                    b.Property<double>("RegularMarketPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tab_chart");
                });
#pragma warning restore 612, 618
        }
    }
}
